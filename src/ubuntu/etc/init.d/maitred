#! /bin/bash
### BEGIN INIT INFO
# Provides:          maitred
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Maintain authorized key files
# Description:       Maintain authorized key files for multipe users
### END INIT INFO

# Author: Richard Hodgson <richard@cruxdigit.al>

DESC="maitre-d"
NAME="maitred"
DAEMON=/usr/bin/maitred
DAEMON_ARGS="/etc/maitred.conf"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME="/etc/init.d/${NAME}"
USER="root"

# Exit if the package is not installed
[ -x $DAEMON ] || exit 98

[ ! -r /etc/maitred.conf ] && echo "error: missing '/etc/maitred.conf'" >&2 && exit 99

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

VERBOSE="yes"

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
    PID=$(cat $PIDFILE 2>/dev/null)
    if [ ${#PID} -ne "0" ]; then
        echo "$NAME is already running"
        return 1
    fi

    touch /var/log/maitred/maitred.log

    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    start-stop-daemon -c $USER --start --background --quiet -m --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
        || return 1
    start-stop-daemon -c $USER --start --background --quiet -m --pidfile $PIDFILE --exec $DAEMON -- \
        $DAEMON_ARGS \
        || return 2

    while [ ! -f $PIDFILE ]
    do
      sleep 1
    done
    chown $USER $PIDFILE
    return "0"
}

#
# Function that stops the daemon/service
#
do_stop()
{
    PID=$(cat $PIDFILE)

    if [ ${#PID} -eq "0" ]; then
        return 1
    fi

    PGID=$(ps opgid= $PID)
    pkill -s $PGID
    echo "" > $PIDFILE
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    return "0"
}

do_reload() {
    do_stop
    do_start
    return 0
}

case $1 in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  status)
    status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
    ;;
  restart|force-reload)
    log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1)
        do_start
        case "$?" in
            0) log_end_msg 0 ;;
            1) log_end_msg 1 ;; # Old process is still running
            *) log_end_msg 1 ;; # Failed to start
        esac
        ;;
      *)
        # Failed to stop
        log_end_msg 1
        ;;
    esac
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
    exit 3
    ;;
esac

: